From 7c4d8c123ab17b9e325543344601aa136f995ec0 Mon Sep 17 00:00:00 2001
From: Nathan Ward <nward@searchlight.nz>
Date: Sun, 23 May 2021 21:33:39 +1200
Subject: [PATCH 1/3] Add parsing for octets coming in as integer or str values
 (i.e. from dictionaries with VALUE definitions for an attribute)

As part of this, don't overwrite "str"

[Canonical Notes: Cherry-picked to include only changes to pyrad/tools.py]
---
 pyrad/tools.py          | 17 +++++++++++------
 tests/testDictionary.py | 16 ++++++++++++++++
 2 files changed, 27 insertions(+), 6 deletions(-)

Index: pyrad-2.4/pyrad/tools.py
===================================================================
--- pyrad-2.4.orig/pyrad/tools.py
+++ pyrad-2.4/pyrad/tools.py
@@ -17,15 +17,27 @@ def EncodeString(str):
         return str
 
 
-def EncodeOctets(str):
-    if len(str) > 253:
+def EncodeOctets(octetstring):
+    # Check for max length of the hex encoded with 0x prefix, as a sanity check
+    if len(octetstring) > 508:
         raise ValueError('Can only encode strings of <= 253 characters')
 
-    if str.startswith(b'0x'):
-        hexstring = str.split(b'0x')[1]
-        return binascii.unhexlify(hexstring)
+    if isinstance(octetstring, bytes) and octetstring.startswith(b'0x'):
+        hexstring = octetstring.split(b'0x')[1]
+        encoded_octets = binascii.unhexlify(hexstring)
+    elif isinstance(octetstring, str) and octetstring.startswith('0x'):
+        hexstring = octetstring.split('0x')[1]
+        encoded_octets = binascii.unhexlify(hexstring)
+    elif isinstance(octetstring, str) and octetstring.isdecimal():
+        encoded_octets = struct.pack('>L',int(octetstring)).lstrip((b'\x00'))
     else:
-        return str
+        encoded_octets = octetstring
+
+    # Check for the encoded value being longer than 253 chars
+    if len(encoded_octets) > 253:
+        raise ValueError('Can only encode strings of <= 253 characters')
+
+    return encoded_octets
 
 
 def EncodeAddress(addr):
@@ -111,7 +123,7 @@ def EncodeAscendBinary(str):
 
     trailer = 8 * b'\x00'
 
-    result = b''.join((terms['family'], terms['action'], terms['direction'], b'\x00', 
+    result = b''.join((terms['family'], terms['action'], terms['direction'], b'\x00',
         terms['src'], terms['dst'], terms['srcl'], terms['dstl'], terms['proto'], b'\x00',
         terms['sport'], terms['dport'], terms['sportq'], terms['dportq'], b'\x00\x00', trailer))
     return result
